import java.io.*;
import java.util.*;

 class Test {
    private static final FastIO sc = new FastIO();

    public static void main(String[] args) {
        int t = sc.nextInt();
        while (t-- > 0) {
            solve();
        }
    }

    static void solve() {
        int n=sc.nextInt();
        long [] a=new long [n];
        ArrayList<Long> arr=new ArrayList<>();
        int i=0,j=0;
        long ans=0;
        for(i=0;i<n;i++) a[i]=sc.nextLong();
        for(i=0;i<n-1;i++)
        {
            if(a[i+1]<a[i])
            {
                 arr.add(a[i]-a[i+1]);
                 a[i+1]=a[i];
            }
        }
        if(arr.size()==0)
        {
            System.out.println(0);
            return;
        }
        Collections.sort(arr);
        
    
        ans+=arr.get(0)*(arr.size()+1);

        for(i=1;i<arr.size();i++)
        {
            if(arr.get(i)==arr.get(j))
            continue;
            else
            {
                ans+=(arr.size()-i+1)*(arr.get(i)-arr.get(j));
                j=i;
            }
          //  System.out.println(arr.get(i)+"     "+ans+"       "+j);
        }

        
        System.out.println(ans);
    }
}

class FastIO extends PrintWriter {
    private BufferedReader br;
    private StringTokenizer st;

    public FastIO() {
        this(System.in, System.out);
    }

    public FastIO(InputStream in, OutputStream out) {
        super(out);
        br = new BufferedReader(new InputStreamReader(in));
    }

    public FastIO(String input, String output) throws FileNotFoundException {
        super(output);
        br = new BufferedReader(new FileReader(input));
    }

    public String next() {
        try {
            while (st == null || !st.hasMoreTokens()) {
                st = new StringTokenizer(br.readLine());
            }
            return st.nextToken();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public double nextDouble() {
        return Double.parseDouble(next());
    }

    public long nextLong() {
        return Long.parseLong(next());
    }
}